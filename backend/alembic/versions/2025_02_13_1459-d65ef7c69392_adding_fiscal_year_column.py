"""Adding fiscal year column

Revision ID: d65ef7c69392
Revises: c9a2b729be0e
Create Date: 2025-02-13 14:59:47.650294+00:00

"""
from datetime import datetime, timezone
from typing import Sequence, Union

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

from models import CANHistory, CANHistoryType, OpsEvent

# revision identifiers, used by Alembic.
revision: str = 'd65ef7c69392'
down_revision: Union[str, None] = 'c9a2b729be0e'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('can_history', sa.Column('fiscal_year', sa.Integer(), nullable=True))
    op.add_column('can_history_version', sa.Column('fiscal_year', sa.Integer(), autoincrement=False, nullable=True))
    can_history_table = sa.sql.table("can_history", sa.Column("fiscal_year", sa.Integer()), sa.Column("id", sa.Integer()))
    can_history_version_table = sa.sql.table(
        "can_history_version",
        sa.Column("fiscal_year", sa.Integer()),
        sa.Column("id", sa.Integer()),
    )
    connection = op.get_bind()
    for can_history in connection.execute(sa.select(CANHistory)).all():
        history_fiscal_year = get_fiscal_year(connection, can_history)
        # update can history table with fiscal year
        op.execute(
            can_history_table.update()
            .where(can_history_table.c.id == can_history.id)
            .values(fiscal_year=history_fiscal_year)
        )
        op.execute(
            can_history_version_table.update()
            .where(can_history_version_table.c.id == can_history.id)
            .values(fiscal_year=history_fiscal_year)
        )
    op.alter_column('can_history', 'fiscal_year',
               existing_type=sa.INTEGER(),
               nullable=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column('can_history_version', 'fiscal_year')
    op.drop_column('can_history', 'fiscal_year')
    # ### end Alembic commands ###

def get_fiscal_year(connection, history_event) -> int:
        match history_event.history_type:
            case CANHistoryType.CAN_DATA_IMPORT:
                event_details = connection.scalar(
                    sa.select(OpsEvent.event_details).where(
                        OpsEvent.id == history_event.ops_event_id
                    )
                )
                return format_fiscal_year(event_details["new_can"]["created_on"])
            case CANHistoryType.CAN_NICKNAME_EDITED:
                return format_fiscal_year(history_event.timestamp)
            case CANHistoryType.CAN_DESCRIPTION_EDITED:
                return format_fiscal_year(history_event.timestamp)
            case CANHistoryType.CAN_PORTFOLIO_EDITED:
                return format_fiscal_year(history_event.timestamp)
            case CANHistoryType.CAN_DIVISION_EDITED:
                return format_fiscal_year(history_event.timestamp)
            case CANHistoryType.CAN_FUNDING_CREATED:
                event_details = connection.scalar(
                    sa.select(OpsEvent.event_details).where(
                        OpsEvent.id == history_event.ops_event_id
                    )
                )
                return format_fiscal_year(event_details["new_can_funding_budget"]["created_on"])
            case CANHistoryType.CAN_FUNDING_EDITED:
                return format_fiscal_year(history_event.timestamp)
            case CANHistoryType.CAN_RECEIVED_CREATED:
                event_details = connection.scalar(
                    sa.select(OpsEvent.event_details).where(
                        OpsEvent.id == history_event.ops_event_id
                    )
                )
                return format_fiscal_year(event_details["new_can_funding_received"]["created_on"])
            case CANHistoryType.CAN_RECEIVED_EDITED:
                return format_fiscal_year(history_event.timestamp)
            case CANHistoryType.CAN_RECEIVED_DELETED:
                return format_fiscal_year(history_event.timestamp)
        return 0

def format_fiscal_year(timestamp) -> int:
    """Convert the timestamp to {Fiscal Year}. The fiscal year is calendar year + 1 if the timestamp is october or later.
    This method can take either an iso format timestamp string or a datetime object"""
    current_fiscal_year = 0
    if isinstance(timestamp, str):
        parsed_timestamp = datetime.fromisoformat(timestamp[:-1]).astimezone(timezone.utc)
        current_fiscal_year = parsed_timestamp.year
        if parsed_timestamp.month >= 10:
            current_fiscal_year = parsed_timestamp.year + 1
    elif isinstance(timestamp, datetime):
        if timestamp.month >= 10:
            current_fiscal_year = timestamp.year + 1
        else:
            current_fiscal_year = timestamp.year

    return current_fiscal_year
